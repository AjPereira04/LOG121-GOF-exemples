@startuml Diagramme de classe

class java.util.Observer {
     void update(Observable o, Object arg);
}
class java.util.Observable {
    void setChanged();
    void notifyObservers();
    void addObserver(java.util.Observer observer);
}
class TemperatureGUI{
    String label;
    Frame TemperatureFrame;
}

class TemperatureModel{
    public double getF();
    public void setF(double temperatureF)
    public double getC()
    public void setC(double temperatureC)
    private double temperatureF;
}

Class TemperatureCanvas{
    private TemperatureGauge _farenheit;
	private static final int width = 20;
	private static final int top = 20;
	private static final int left = 100;
	private static final int right = 250;
	private static final int height = 200;
    public void paint(Graphics g)
}

TemperatureGUI *-- TemperatureModel: model
TemperatureGUI *-- Frame: temperatureFrame

UpListener --up|> ActionListener

CelsiusGUI --up|> TemperatureGUI
FarenheitGUI --up|> TemperatureGUI

GraphGUI --up|> Frame 
 
TemperatureCanvas --up|> Canvas

TemperatureModel --up|> java.util.Observable

SliderGUI .-up|> java.util.Observer
TemperatureGUI .-up|> java.util.Observer
Frame .-up|>  java.util.Observer



@enduml

@startuml Diagramme de séquence
skinparam Style strictuml
title Diagramme séquence MVCTempConvert
actor main
participant "temperature:TemperatureModel" as TemperatureModel
participant FarenheitGUI
participant TemperatureGUI
participant "temperatureFrame:Frame" as Frame
participant "display:TextField" as TextField
participant "buttons:Panel" as Panel
participant "upButton:Button" as upButton
participant "downButton:Button" as downButton


main -> TemperatureModel **: temperature = new()
main -> FarenheitGUI **: new(temperature, 100,100)
FarenheitGUI -> TemperatureGUI **: new(model, h,v)


TemperatureGUI -> Frame **: temperatureFrame = new(String label)
TemperatureGUI -> TextField **: display = new()
TemperatureGUI -> upButton **: upButton = new(String label)
TemperatureGUI -> downButton **: downButton = new(String label)
TemperatureGUI -> Label **: label = new(label)
TemperatureGUI -> Frame: add(String position, label)
TemperatureGUI -> Frame: add(String position, display)
TemperatureGUI -> Panel **: buttons = new()
TemperatureGUI -> Panel: add(upButton);
TemperatureGUI -> Panel: add(downButton);
TemperatureGUI -> Frame: add(position,buttons);
participant "closeListener:CloseListener" as closeListener
TemperatureGUI -> closeListener**: new()
TemperatureGUI -> Frame: addWindowListener(closeListener)
TemperatureGUI -> TemperatureModel: addObserver(this)
TemperatureGUI -> Frame: setSize(200,100);
TemperatureGUI -> Frame: setLocation(h, v);
TemperatureGUI -> Frame: setVisible(true);


FarenheitGUI -> TemperatureGUI : setDisplay(string temperatureF)
participant "upListener:UpListener" as upListener
participant "downListener:UpListener" as downListener
FarenheitGUI -> upListener**: new()
FarenheitGUI -> downListener**: new()
FarenheitGUI -> TemperatureGUI : addUpListener(upListener)
FarenheitGUI -> TemperatureGUI : addUpListener(downListener)
participant "displayListener:DisplayListener" as displayListener
FarenheitGUI -> displayListener**: new()
FarenheitGUI -> TemperatureGUI : addDisplayListener(displayListener)

main -> CelsiusGUI **: new(temperature, 100,100)
main -> GraphGUI **: new(temperature, 100,100)
main -> SliderGUI **: new(temperature, 100,100)
@enduml
